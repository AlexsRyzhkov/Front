/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './../__root'
import { Route as AuthImport } from './../auth'
import { Route as AuthenticationImport } from './../_authentication'
import { Route as AuthRegisterImport } from './../auth/register'
import { Route as AuthLoginImport } from './../auth/login'
import { Route as AuthConfirmCodeImport } from './../auth/confirm-code'
import { Route as AuthenticationProjectsImport } from './../_authentication/projects'

// Create/Update Routes

const AuthRoute = AuthImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRoute,
} as any)

const AuthenticationRoute = AuthenticationImport.update({
  id: '/_authentication',
  getParentRoute: () => rootRoute,
} as any)

const AuthRegisterRoute = AuthRegisterImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => AuthRoute,
} as any)

const AuthLoginRoute = AuthLoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => AuthRoute,
} as any)

const AuthConfirmCodeRoute = AuthConfirmCodeImport.update({
  id: '/confirm-code',
  path: '/confirm-code',
  getParentRoute: () => AuthRoute,
} as any)

const AuthenticationProjectsRoute = AuthenticationProjectsImport.update({
  id: '/projects',
  path: '/projects',
  getParentRoute: () => AuthenticationRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_authentication': {
      id: '/_authentication'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticationImport
      parentRoute: typeof rootRoute
    }
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/_authentication/projects': {
      id: '/_authentication/projects'
      path: '/projects'
      fullPath: '/projects'
      preLoaderRoute: typeof AuthenticationProjectsImport
      parentRoute: typeof AuthenticationImport
    }
    '/auth/confirm-code': {
      id: '/auth/confirm-code'
      path: '/confirm-code'
      fullPath: '/auth/confirm-code'
      preLoaderRoute: typeof AuthConfirmCodeImport
      parentRoute: typeof AuthImport
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginImport
      parentRoute: typeof AuthImport
    }
    '/auth/register': {
      id: '/auth/register'
      path: '/register'
      fullPath: '/auth/register'
      preLoaderRoute: typeof AuthRegisterImport
      parentRoute: typeof AuthImport
    }
  }
}

// Create and export the route tree

interface AuthenticationRouteChildren {
  AuthenticationProjectsRoute: typeof AuthenticationProjectsRoute
}

const AuthenticationRouteChildren: AuthenticationRouteChildren = {
  AuthenticationProjectsRoute: AuthenticationProjectsRoute,
}

const AuthenticationRouteWithChildren = AuthenticationRoute._addFileChildren(
  AuthenticationRouteChildren,
)

interface AuthRouteChildren {
  AuthConfirmCodeRoute: typeof AuthConfirmCodeRoute
  AuthLoginRoute: typeof AuthLoginRoute
  AuthRegisterRoute: typeof AuthRegisterRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthConfirmCodeRoute: AuthConfirmCodeRoute,
  AuthLoginRoute: AuthLoginRoute,
  AuthRegisterRoute: AuthRegisterRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof AuthenticationRouteWithChildren
  '/auth': typeof AuthRouteWithChildren
  '/projects': typeof AuthenticationProjectsRoute
  '/auth/confirm-code': typeof AuthConfirmCodeRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
}

export interface FileRoutesByTo {
  '': typeof AuthenticationRouteWithChildren
  '/auth': typeof AuthRouteWithChildren
  '/projects': typeof AuthenticationProjectsRoute
  '/auth/confirm-code': typeof AuthConfirmCodeRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_authentication': typeof AuthenticationRouteWithChildren
  '/auth': typeof AuthRouteWithChildren
  '/_authentication/projects': typeof AuthenticationProjectsRoute
  '/auth/confirm-code': typeof AuthConfirmCodeRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/auth'
    | '/projects'
    | '/auth/confirm-code'
    | '/auth/login'
    | '/auth/register'
  fileRoutesByTo: FileRoutesByTo
  to:
    | ''
    | '/auth'
    | '/projects'
    | '/auth/confirm-code'
    | '/auth/login'
    | '/auth/register'
  id:
    | '__root__'
    | '/_authentication'
    | '/auth'
    | '/_authentication/projects'
    | '/auth/confirm-code'
    | '/auth/login'
    | '/auth/register'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AuthenticationRoute: typeof AuthenticationRouteWithChildren
  AuthRoute: typeof AuthRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  AuthenticationRoute: AuthenticationRouteWithChildren,
  AuthRoute: AuthRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_authentication",
        "/auth"
      ]
    },
    "/_authentication": {
      "filePath": "_authentication.tsx",
      "children": [
        "/_authentication/projects"
      ]
    },
    "/auth": {
      "filePath": "auth.tsx",
      "children": [
        "/auth/confirm-code",
        "/auth/login",
        "/auth/register"
      ]
    },
    "/_authentication/projects": {
      "filePath": "_authentication/projects.tsx",
      "parent": "/_authentication"
    },
    "/auth/confirm-code": {
      "filePath": "auth/confirm-code.tsx",
      "parent": "/auth"
    },
    "/auth/login": {
      "filePath": "auth/login.tsx",
      "parent": "/auth"
    },
    "/auth/register": {
      "filePath": "auth/register.tsx",
      "parent": "/auth"
    }
  }
}
ROUTE_MANIFEST_END */
